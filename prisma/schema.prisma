generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DEVELOPER
  DATA_ENTRY
  OBSERVER
}

enum JobStatus {
  SCHEDULED
  CANCELLED
  SUCCEEDED
  WAITING_RERUN
  WAITING
  DELAYED
  RUNNING
  STALLED
  FAILED
  PAUSED
  DRAFT
}

enum JobStepStatus {
  SUCCEEDED
  RUNNING
  WAITING_RERUN
  FAILED
}

enum Action {
  CREATE
  UPDATE
  DELETE
  OTHER
}

enum Resource {
  USER
  WORKFLOW
}

enum Trigger {
  MANUAL
  WEBHOOK
  SCHEDULE
  EVENT
}

model User {
  id Int @id @default(autoincrement())

  role     Role   @default(OBSERVER)
  name     String
  email    String @unique
  password String

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @updatedAt @db.Timestamptz()

  Activities Activity[]
}

model Workflow {
  id  Int    @id @default(autoincrement())
  key String @unique

  active           Boolean  @default(true) // Indicates if the workflow is currently active, when inactive jobs will be kept in the queue but not executed
  disabledEvents   String[] // List of event triggers that are disabled
  disabledWebhooks String[] // List of webhooks that are disabled

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @updatedAt @db.Timestamptz()

  Jobs Job[]
}

model Schedule {
  id         Int @id @default(autoincrement())
  workflowId Int

  cronExpression String
  active         Boolean @default(true)
  dangling       Boolean @default(false)

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @updatedAt @db.Timestamptz()

  @@unique([workflowId, cronExpression])
}

model Job {
  id         Int     @id @default(autoincrement())
  parentId   Int? // Optional parent job ID for reruns
  bullId     String? @unique
  dedupeId   String?
  workflowId Int

  status      JobStatus @default(WAITING)
  trigger     Trigger   @default(MANUAL) // Which trigger initiated the job
  triggerId   String? // Identifier for the trigger (e.g., webhook ID, event, schedule ID)
  scheduledAt DateTime? @db.Timestamptz()
  payload     Json?

  sentryTrace   String?
  sentryBaggage String?

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @updatedAt @db.Timestamptz()

  Workflow Workflow? @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Steps    JobStep[]

  @@index([status])
  @@index([workflowId])
}

model JobStep {
  jobId Int
  name  String

  status  JobStepStatus @default(RUNNING)
  result  Json?
  retries Int           @default(0) // Number of retries for this step
  runs    Int           @default(1) // Number of runs for this step, both retries and reruns combined

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @updatedAt @db.Timestamptz()

  Job Job @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([jobId, name])
}

model OAuth2AuthState {
  state    String @id
  verifier String

  provider   String
  connection String

  createdAt DateTime @default(now()) @db.Timestamptz()
}

model OAuth2Token {
  connection String
  provider   String

  access  String
  refresh String

  scopes String[]

  expiresAt DateTime  @db.Timestamptz()
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @updatedAt @db.Timestamptz()

  @@id([provider, connection])
}

model Activity {
  id Int @id @default(autoincrement())

  userId Int

  resource   Resource?
  resourceId String? // ID of the resource being acted upon (if applicable)
  action     Action
  subAction  String? // Additional action details (e.g., "rerun", "disable")
  details    Json?

  createdAt DateTime @default(now()) @db.Timestamptz()

  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Revisions Revision[]

  @@index([userId])
  @@index([resource, resourceId])
}

model Revision {
  id         Int @id @default(autoincrement())
  activityId Int

  resource   Resource
  resourceId String // ID of the target resource (e.g., Product ID)
  action     Action // Action performed on the resource (e.g., CREATE, UPDATE, DELETE)

  data  Json? // Serialized data of the resource at the time of revision
  delta Json? // Optional delta of changes made, if applicable

  createdAt DateTime @default(now()) @db.Timestamptz()

  Activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([resource, resourceId])
  @@index([activityId])
}
